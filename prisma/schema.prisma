generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(nanoid())
  name          String    @db.VarChar(255)
  email         String
  emailVerified Boolean   @default(false)
  image         String?   @db.VarChar(512)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  sessions      Session[]
  accounts      Account[]
  Agent         Agent[]
  Meeting       Meeting[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId, expiresAt])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@unique([accountId, providerId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Agent {
  id           String    @id @default(nanoid())
  name         String    @db.VarChar(255)
  instructions String    @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Meeting      Meeting[]

  @@index([userId])
  @@map("agents")
}

enum MeetingStatus {
  upcoming
  active
  completed
  processing
  canceled
}

model Meeting {
  id            String        @id @default(nanoid())
  name          String
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  agentId       String
  agent         Agent         @relation(fields: [agentId], references: [id], onDelete: Cascade)
  status        MeetingStatus @default(upcoming)
  startedAt     DateTime?
  endedAt       DateTime?
  transcriptUrl String?       @db.Text
  recordingUrl  String?       @db.Text
  summary       String?       @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())

  @@index([userId])
  @@index([agentId])
  @@map("meetings")
}
